/* shishi.h	header file for shishi library -*- c -*-
 * Copyright (C) 2002  Simon Josefsson
 *
 * This file is part of Shishi.
 *
 * Shishi is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * Shishi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Shishi; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifndef SHISHI_H
#define SHISHI_H

#include <stdio.h>		/* FILE */
#include <stddef.h>		/* size_t */
#include <libtasn1.h>		/* ASN1_TYPE */

#define SHISHI_VERSION "@PACKAGE_VERSION@"

/* Error codes */
enum
{
  SHISHI_OK = 0,
  SHISHI_ASN1_ERROR = 1,
  SHISHI_FOPEN_ERROR = 2,
  SHISHI_FCLOSE_ERROR = 3,
  SHISHI_MALLOC_ERROR = 4,
  SHISHI_BASE64_ERROR = 5,
  SHISHI_REALM_MISMATCH = 6,
  SHISHI_CNAME_MISMATCH = 7,
  SHISHI_NONCE_MISMATCH = 8,
  SHISHI_TGSREP_BAD_KEYTYPE = 9,
  SHISHI_KDCREP_BAD_KEYTYPE = 10,
  SHISHI_APREP_BAD_KEYTYPE = 11,
  SHISHI_APREP_VERIFY_FAILED = 12,
  SHISHI_APREQ_BAD_KEYTYPE = 13,
  SHISHI_TOO_SMALL_BUFFER = 14,
  SHISHI_DERIVEDKEY_TOO_SMALL = 15,
  SHISHI_KEY_TOO_LARGE = 16,
  SHISHI_CRYPTO_ERROR = 17,
  SHISHI_GCRYPT_ERROR = 18,
  SHISHI_SOCKET_ERROR = 19,
  SHISHI_BIND_ERROR = 20,
  SHISHI_SENDTO_ERROR = 21,
  SHISHI_RECVFROM_ERROR = 22,
  SHISHI_CLOSE_ERROR = 23,
  SHISHI_KDC_TIMEOUT = 24,
  SHISHI_KDC_NOT_KNOWN_FOR_REALM = 25,
  SHISHI_TTY_ERROR = 26,
  SHISHI_GOT_KRBERROR = 27,
  SHISHI_HANDLE_ERROR = 28,
  SHISHI_INVALID_TICKETSET = 29
};

/* This is not specified in the ASN.1 syntax for some reason. */
typedef enum
{
  SHISHI_NT_UNKNOWN = 0,	/* Name type not known */
  SHISHI_NT_PRINCIPAL,		/* Just the name of the principal as in */
  /* DCE, or for users */
  SHISHI_NT_SRV_INST,		/* Service and other unique instance (krbtgt) */
  SHISHI_NT_SRV_HST,		/* Service with host name as instance */
  /* (telnet, rcommands) */
  SHISHI_NT_SRV_XHST,		/* Service with host as remaining components */
  SHISHI_NT_UID			/* Unique ID */
}
Shishi_name_type;

/* This is not specified in the ASN.1 syntax for some reason. */
typedef enum
{
  SHISHI_PA_TGS_REQ = 1,	/* padata is APREQ */
  SHISHI_PA_ENC_TIMESTAMP,	/* timestamp pre authentication */
  SHISHI_PA_PW_SALT,		/* salt for string-to-key */
  SHISHI_PA_ETYPE_INFO = 10,	/* in krb-error, request for preauth */
  SHISHI_PA_USE_SPECIFIED_KVNO = 20	/* use specified kvno */
}
Shishi_padata_type;

typedef enum
{
  SHISHI_APOPTIONS_RESERVED = 0x1,	/* bit 0 */
  SHISHI_APOPTIONS_USE_SESSION_KEY = 0x2,	/* bit 1 */
  SHISHI_APOPTIONS_MUTUAL_REQUIRED = 0x4	/* bit 2 */
}
Shishi_apoptions;

typedef enum
{
  SHISHI_TICKETFLAGS_RESERVED = 0x1,	/* bit 0 */
  SHISHI_TICKETFLAGS_FORWARDABLE = 0x2,	/* bit 1 */
  SHISHI_TICKETFLAGS_FORWARDED = 0x4,	/* bit 2 */
  SHISHI_TICKETFLAGS_PROXIABLE = 0x8,	/* bit 3 */
  SHISHI_TICKETFLAGS_PROXY = 0x10,	/* bit 4 */
  SHISHI_TICKETFLAGS_MAY_POSTDATE = 0x20,	/* bit 5 */
  SHISHI_TICKETFLAGS_POSTDATED = 0x40,	/* bit 6 */
  SHISHI_TICKETFLAGS_INVALID = 0x80,	/* bit 7 */
  SHISHI_TICKETFLAGS_RENEWABLE = 0x100,	/* bit 8 */
  SHISHI_TICKETFLAGS_INITIAL = 0x200,	/* bit 9 */
  SHISHI_TICKETFLAGS_PRE_AUTHENT = 0x400,	/* bit 10 */
  SHISHI_TICKETFLAGS_HW_AUTHENT = 0x800,	/* bit 11 */
  SHISHI_TICKETFLAGS_TRANSITED_POLICY_CHECKED = 0x1000,	/* bit 12 */
  SHISHI_TICKETFLAGS_OK_AS_DELEGATE = 0x2000	/* bit 12 */
}
Shishi_ticketflags;

typedef enum
{
  SHISHI_KDCOPTIONS_RESERVED = 0x1,	/* bit 0 */
  SHISHI_KDCOPTIONS_FORWARDABLE = 0x2,	/* bit 1 */
  SHISHI_KDCOPTIONS_FORWARDED = 0x4,	/* bit 2 */
  SHISHI_KDCOPTIONS_PROXIABLE = 0x8,	/* bit 3 */
  SHISHI_KDCOPTIONS_PROXY = 0x10,	/* bit 4 */
  SHISHI_KDCOPTIONS_ALLOW_POSTDATE = 0x20,	/* bit 5 */
  SHISHI_KDCOPTIONS_POSTDATED = 0x40,	/* bit 6 */
  SHISHI_KDCOPTIONS_UNUSED7 = 0x80,	/* bit 7 */
  SHISHI_KDCOPTIONS_RENEWABLE = 0x100,	/* bit 8 */
  SHISHI_KDCOPTIONS_UNUSED9 = 0x200,	/* bit 9 */
  SHISHI_KDCOPTIONS_UNUSED10 = 0x400,	/* bit 10 */
  SHISHI_KDCOPTIONS_UNUSED11 = 0x800,	/* bit 11 */
  SHISHI_KDCOPTIONS_DISABLE_TRANSITED_CHECK = 0x4000000,	/* bit 26 */
  SHISHI_KDCOPTIONS_RENEWABLE_OK = 0x8000000,	/* bit 27 */
  SHISHI_KDCOPTIONS_ENC_TKT_IN_SKEY = 0x10000000,	/* bit 28 */
  SHISHI_KDCOPTIONS_RENEW = 0x40000000,	/* bit 30 */
  SHISHI_KDCOPTIONS_VALIDATE = 0x80000000	/* bit 31 */
}
Shishi_KDCOptions;

typedef enum
{
  SHISHI_MSGTYPE_AS_REQ = 10,
  SHISHI_MSGTYPE_AS_REP = 11,
  SHISHI_MSGTYPE_TGS_REQ = 12,
  SHISHI_MSGTYPE_TGS_REP = 13
}
Shihi_msgtype;

typedef enum
{
  SHISHI_NULL = 0,
  SHISHI_DES_CBC_CRC = 1,
  SHISHI_DES_CBC_MD4 = 2,
  SHISHI_DES_CBC_MD5 = 3,
  SHISHI_DES3_CBC_HMAC_SHA1_KD = 16,
  SHISHI_AES128_CTS_HMAC_SHA1_96 = 17,
  SHISHI_AES256_CTS_HMAC_SHA1_96 = 18
}
Shishi_etype;

typedef enum
{
  SHISHI_CRC32 = 1,
  SHISHI_RSA_MD4 = 2,
  SHISHI_RSA_MD4_DES = 3,
  SHISHI_DES_MAC = 4,
  SHISHI_DES_MAC_K = 5,
  SHISHI_RSA_MD4_DES_K = 6,
  SHISHI_RSA_MD5 = 7,
  SHISHI_RSA_MD5_DES = 8,
  SHISHI_HMAC_SHA1_96_AES128 = 10,
  SHISHI_HMAC_SHA1_96_AES256 = 11,
  SHISHI_HMAC_SHA1_DES3_KD = 12
}
Shishi_cksumtype;

typedef enum
{
  SHISHI_FILETYPE_TEXT = 0,
  SHISHI_FILETYPE_DER,
  SHISHI_FILETYPE_HEX,
  SHISHI_FILETYPE_BASE64,
  SHISHI_FILETYPE_BINARY
}
Shishi_filetype;

typedef enum
  {
    /* 1. AS-REQ PA-ENC-TIMESTAMP padata timestamp, encrypted with the
       client key */
    SHISHI_KEYUSAGE_ASREQ_PA_ENC_TIMESTAMP = 1,
    /* 2. AS-REP Ticket and TGS-REP Ticket (includes TGS session key or 
       application session key), encrypted with the service key  */
    SHISHI_KEYUSAGE_KDCREP_TICKET = 2,
    /* 3. AS-REP encrypted part (includes TGS session key or application
       session key), encrypted with the client key */
    SHISHI_KEYUSAGE_ENCASREPPART = 3,
    /* 4. TGS-REQ KDC-REQ-BODY AuthorizationData, encrypted with the TGS
       session key  */
    SHISHI_KEYUSAGE_TGSREQ_AUTHORIZATIONDATA_TGS_SESSION_KEY = 4,
    /* 5. TGS-REQ KDC-REQ-BODY AuthorizationData, encrypted with the TGS
       authenticator subkey (section 5.4.1) */
    SHISHI_KEYUSAGE_TGSREQ_AUTHORIZATIONDATA_TGS_AUTHENTICATOR_KEY = 5,
    /* 6. TGS-REQ PA-TGS-REQ padata AP-REQ Authenticator cksum, keyed with the
       TGS session key  */
    SHISHI_KEYUSAGE_TGSREQ_APREQ_AUTHENTICATOR_CKSUM = 6,
    /* 7. TGS-REQ PA-TGS-REQ padata AP-REQ Authenticator (includes TGS
       authenticator subkey), encrypted with the TGS session key */
    SHISHI_KEYUSAGE_TGSREQ_APREQ_AUTHENTICATOR = 7,
    /* 8. TGS-REP encrypted part (includes application session key), encrypted
       with the TGS session key */
    SHISHI_KEYUSAGE_ENCTGSREPPART_SESSION_KEY = 8,
    /* 9. TGS-REP encrypted part (includes application session key), encrypted
       with the TGS authenticator subkey */
    SHISHI_KEYUSAGE_ENCTGSREPPART_AUTHENTICATOR_KEY = 9,
    /* 10. AP-REQ Authenticator cksum, keyed with the application
       session key */
    SHISHI_KEYUSAGE_APREQ_AUTHENTICATOR_CKSUM = 10,
    /* 11. AP-REQ Authenticator (includes application authenticator subkey),
       encrypted with the application session key */
    SHISHI_KEYUSAGE_APREQ_AUTHENTICATOR = 11,
    /* 12. AP-REP encrypted part (includes application session subkey),
       encrypted with the application session key */
    SHISHI_KEYUSAGE_ENCAPREPPART = 12,
    /* 13. KRB-PRIV encrypted part, encrypted with a key chosen by the
       application */
    SHISHI_KEYUSAGE_KRB_PRIV = 13,
    /* 14. KRB-CRED encrypted part, encrypted with a key chosen by the
       application */
    SHISHI_KEYUSAGE_KRB_CRED = 14,
    /* 15. KRB-SAFE cksum, keyed with a key chosen by the application */
    SHISHI_KEYUSAGE_KRB_SAFE = 15,
    /* 18. KRB-ERROR checksum (e-cksum) */
    SHISHI_KEYUSAGE_KRB_ERROR = 18,
    /* 19. AD-KDCIssued checksum (ad-checksum) */
    SHISHI_KEYUSAGE_AD_KDCISSUED = 19,
    /* 20. Checksum for Mandatory Ticket Extensions */
    SHISHI_KEYUSAGE_TICKET_EXTENSION = 20,
    /* 21. Checksum in Authorization Data in Ticket Extensions */
    SHISHI_KEYUSAGE_TICKET_EXTENSION_AUTHORIZATION = 21,
    /* 22-24. Reserved for use in GSSAPI mechanisms derived from RFC 1964.
       (raeburn/MIT) */
    /* 25-511. Reserved for future use in Kerberos and related protocols. */
    /* 512-1023. Reserved for uses internal to a Kerberos implementation. */
  }
Shishi_keyusage;

typedef struct Shishi Shishi;
typedef struct Shishi_ticket Shishi_ticket;
typedef struct Shishi_ticketset Shishi_ticketset;
typedef struct Shishi_as Shishi_as;
typedef struct Shishi_tgs Shishi_tgs;
typedef struct Shishi_ap Shishi_ap;
typedef struct Shishi_key Shishi_key;

/* init.c */
extern Shishi *shishi (void);
extern int shishi_init (Shishi ** handle);
extern int shishi_init_with_paths (Shishi ** handle,
				   const char *ticketsetfile,
				   const char *systemcfgfile,
				   const char *usercfgfile);
extern void shishi_done (Shishi * handle);
extern int shishi_verbose (Shishi * handle);
extern int shishi_debug (Shishi * handle);

/* cfg.c */
extern int shishi_cfg (Shishi * handle, char *option);
extern int shishi_cfg_from_file (Shishi * handle, const char *cfg);
extern int shishi_cfg_print (Shishi * handle, FILE * fh);
extern const char *shishi_cfg_default_systemfile (Shishi * handle);
extern const char *shishi_cfg_default_userfile (Shishi * handle);
extern int shishi_cfg_clientkdcetype_set (Shishi * handle, char *value);

/* error.c */
extern const char *shishi_strerror (int err);
extern const char *shishi_strerror_details (Shishi * handle);
extern void shishi_error_set (Shishi * handle, const char *error);
extern void shishi_error_printf (Shishi * handle, char *format, ...);

/* realm.c */
extern char *shishi_realm_default_guess (void);
extern const char *shishi_realm_default (Shishi * handle);
extern void shishi_realm_default_set (Shishi * handle, const char *realm);
extern const char *shishi_realm_for_server_file (Shishi * handle,
						 char *server);
extern const char *shishi_realm_for_server_dns (Shishi * handle,
						char *server);
extern const char *shishi_realm_for_server (Shishi * handle, char *server);

/* principal.c */
extern char *shishi_principal_default_guess (void);
extern const char *shishi_principal_default (Shishi * handle);
extern void shishi_principal_default_set (Shishi * handle,
					  const char *principal);

/* ticket.c */
extern ASN1_TYPE shishi_ticket_ticket (Shishi_ticket * ticket);
extern ASN1_TYPE shishi_ticket_enckdcreppart (Shishi_ticket * ticket);
extern Shishi_key *shishi_ticket_key (Shishi_ticket * ticket);
extern Shishi_ticket *shishi_ticket (Shishi * handle,
				     char *principal,
				     ASN1_TYPE ticket,
				     ASN1_TYPE enckdcreppart);
extern int shishi_ticket_print (Shishi_ticket * ticket, FILE * fh);
extern char *shishi_ticket_principal (Shishi_ticket * ticket);
extern int shishi_ticket_authtime (Shishi_ticket * ticket,
				   char *authtime, int *authtimelen);
extern int shishi_ticket_starttime (Shishi_ticket * ticket,
				    char *starttime, int *starttimelen);
extern int shishi_ticket_endtime (Shishi_ticket * ticket,
				  char *endtime, int *endtimelen);
extern int shishi_ticket_renew_till (Shishi_ticket * ticket,
				     char *renewtilltime, int *renewtilllen);
extern int shishi_ticket_keytype (Shishi_ticket * ticket,
				  int *etype);
extern int shishi_ticket_server (Shishi_ticket * ticket,
				 char *service, int *servicelen);
extern int shishi_ticket_realm (Shishi_ticket * ticket,
				char *realm, int *realmlen);
extern int shishi_ticket_server_p (Shishi_ticket * ticket, char *service);
extern int shishi_ticket_valid_at_time_p (Shishi_ticket * ticket, time_t now);
extern int shishi_ticket_valid_now_p (Shishi_ticket * ticket);


extern int shishi_ticket_apreq_data (Shishi * handle, Shishi_ticket * ticket,
				     char *data, int datalen,
				     ASN1_TYPE * apreq);
extern int shishi_ticket_apreq_data_usage (Shishi * handle,
					   Shishi_ticket * ticket,
					   int authenticatorcksumkeyusage,
					   int authenticatorkeyusage,
					   char *data, int datalen,
					   ASN1_TYPE * apreq);
extern int shishi_ticket_apreq_asn1 (Shishi * handle, Shishi_ticket * ticket,
				     ASN1_TYPE node, char *field,
				     ASN1_TYPE * apreq);
extern int shishi_ticket_apreq_asn1_usage (Shishi * handle,
					   Shishi_ticket * ticket,
					   int authenticatorcksumkeyusage,
					   int authenticatorkeyusage,
					   ASN1_TYPE node, char *field,
					   ASN1_TYPE * apreq);

/* ticketset.c */
extern char *shishi_ticketset_default_file_guess (void);
extern const char *shishi_ticketset_default_file (Shishi * handle);
extern void shishi_ticketset_default_file_set (Shishi * handle,
					       const char *ticketsetfile);
extern int shishi_ticketset_init (Shishi * handle,
				  Shishi_ticketset ** ticketset);
extern Shishi_ticket *shishi_ticketset_get (Shishi * handle,
					    Shishi_ticketset * ticketset,
					    int ticketno);
extern int shishi_ticketset_size (Shishi * handle,
				  Shishi_ticketset * ticketset);
extern int shishi_ticketset_from_file (Shishi * handle,
				       Shishi_ticketset * ticketset,
				       const char *filename);
extern void shishi_ticketset_done (Shishi * handle,
				   Shishi_ticketset * ticketset);
extern Shishi_ticketset *shishi_ticketset (Shishi * handle);
extern Shishi_ticket *
shishi_ticketset_find_ticket_for_server (Shishi *
					 handle,
					 Shishi_ticketset * ticketset,
					 const char *server);
extern Shishi_ticket *
shishi_ticketset_find_ticket_for_clientserver (Shishi * handle,
					       Shishi_ticketset * ticketset,
					       const char *client,
					       const char *server);

/* diskio.c */
extern int
shishi_enckdcreppart_print (Shishi * handle,
			    FILE * fh, ASN1_TYPE enckdcreppart);
extern int
shishi_enckdcreppart_save (Shishi * handle,
			   FILE * fh, ASN1_TYPE enckdcreppart);
extern int
shishi_enckdcreppart_parse (Shishi * handle,
			    FILE * fh, ASN1_TYPE * enckdcreppart);
extern int
shishi_enckdcreppart_read (Shishi * handle,
			   FILE * fh, ASN1_TYPE * enckdcreppart);
extern int shishi_ticket_save (Shishi * handle, FILE * fh, ASN1_TYPE ticket);
extern int
shishi_asn1ticket_print (Shishi * handle, FILE * fh, ASN1_TYPE ticket);
extern int shishi_kdc_req_print (Shishi * handle, FILE * fh, ASN1_TYPE asreq);
extern int shishi_kdc_rep_print (Shishi * handle, FILE * fh, ASN1_TYPE asreq);
extern int shishi_kdc_print (Shishi * handle,
			     FILE * fh,
			     ASN1_TYPE asreq,
			     ASN1_TYPE asrep, ASN1_TYPE encasreppart);
extern int shishi_kdc_req_parse (Shishi * handle,
				 FILE * fh, ASN1_TYPE * asreq);
extern int shishi_kdc_rep_parse (Shishi * handle,
				 FILE * fh, ASN1_TYPE * asrep);
extern int
shishi_ticket_parse (Shishi * handle, FILE * fh, ASN1_TYPE * ticket);
extern int
shishi_ticket_read (Shishi * handle, FILE * fh, ASN1_TYPE * ticket);
extern
  int
shishi_authenticator_print (Shishi * handle,
			    FILE * fh, ASN1_TYPE authenticator);
extern
  int
shishi_authenticator_save (Shishi * handle,
			   FILE * fh, ASN1_TYPE authenticator);

/* authenticator.c */
extern int
shishi_authenticator_add_checksum (Shishi * handle,
				   ASN1_TYPE node,
				   char *data,
				   int datalen,
				   char *key, int keylen, int cksumtype);
extern
  int
shishi_authenticator_set_crealm (Shishi * handle,
				 ASN1_TYPE node, char *crealm);

extern
  int
shishi_authenticator_set_cname (Shishi * handle,
				ASN1_TYPE node,
				Shishi_name_type name_type, char *principal);

extern ASN1_TYPE shishi_authenticator (Shishi * handle);

/* as.c */
extern ASN1_TYPE shishi_as_get_asreq (Shishi_as * as);
extern ASN1_TYPE shishi_as_get_asrep (Shishi_as * as);
extern ASN1_TYPE shishi_as_get_krberror (Shishi_as * as);
extern Shishi_ticket *shishi_as_get_ticket (Shishi_as * as);
extern int shishi_as (Shishi * handle, char *password, Shishi_as ** as);
extern int shishi_as_password_cnamerealmsname (Shishi * handle,
					       char *password,
					       Shishi_as ** as,
					       char *cname,
					       char *realm,
					       char *sname);
extern int shishi_as_key_cnamerealmsname (Shishi * handle,
					  Shishi_key *key,
					  Shishi_as ** as,
					  char *cname,
					  char *realm,
					  char *sname);
extern int shishi_as_cnamerealmsname (Shishi * handle,
				      char *password,
				      Shishi_key *key,
				      Shishi_as ** as,
				      char *cname,
				      char *realm,
				      char *sname);

/* tgs.c */
extern ASN1_TYPE shishi_tgs_get_tgsreq (Shishi_tgs * tgs);
extern Shishi_ticket *shishi_tgs_get_tgticket (Shishi_tgs * tgs);
extern ASN1_TYPE shishi_tgs_get_authenticator (Shishi_tgs * tgs);
extern ASN1_TYPE shishi_tgs_get_apreq (Shishi_tgs * tgs);
extern ASN1_TYPE shishi_tgs_get_tgsrep (Shishi_tgs * tgs);
extern ASN1_TYPE shishi_tgs_get_krberror (Shishi_tgs * tgs);
extern Shishi_ticket *shishi_tgs_get_ticket (Shishi_tgs * tgs);
extern int shishi_tgs (Shishi * handle,
		       Shishi_ticket * tgticket,
		       Shishi_tgs ** tgs,
		       char *server);
extern int shishi_tgs_realmsname (Shishi * handle,
			    Shishi_ticket * tgticket,
			    Shishi_tgs ** tgs,
				  char *realm,
				  char *sname);

/* kdc.c */
extern int
shishi_kdcreq_set_realm (Shishi * handle, ASN1_TYPE kdcreq, char *realm);
extern int
shishi_kdcreq_set_etype (Shishi * handle,
			 ASN1_TYPE kdcreq, int *etype, int netype);
extern int
shishi_kdcreq_set_cname (Shishi * handle,
			 ASN1_TYPE kdcreq,
			 Shishi_name_type name_type, char *principal);
extern int
shishi_kdcreq_set_sname (Shishi * handle,
			 ASN1_TYPE kdcreq,
			 Shishi_name_type name_type, char *service[]);
extern int
shishi_kdcreq_set_server (Shishi * handle, ASN1_TYPE req, char *service);
extern int
shishi_kdcreq_set_realmserver (Shishi * handle,
			       ASN1_TYPE req, char *realm, char *service);
extern int shishi_enckdcreppart (Shishi * handle, ASN1_TYPE * enckdcreppart);
extern int
shishi_kdc_get_salt (Shishi * handle,
		     ASN1_TYPE req, ASN1_TYPE rep, char *salt, int *saltlen);
extern int shishi_kdc_req_sendrecv (Shishi * handle,
				    ASN1_TYPE asn1req, ASN1_TYPE * asn1rep);
extern ASN1_TYPE _shishi_kdc_req (Shishi * handle, int as);
extern int shishi_kdc_req_set_cname (Shishi * handle,
				     ASN1_TYPE node,
				     Shishi_name_type name_type,
				     char *principal);
extern int shishi_kdc_req_set_etype (Shishi * handle,
				     ASN1_TYPE node, int n_etype, int *etype);
extern int shishi_kdc_req_set_sname (Shishi * handle,
				     ASN1_TYPE node,
				     Shishi_name_type name_type,
				     char *service[]);
extern int shishi_kdc_req_set_realm (Shishi * handle,
				     ASN1_TYPE node, char *realm);
extern int shishi_tgs_process (Shishi * handle,
			       ASN1_TYPE tgsreq,
			       ASN1_TYPE tgsrep,
			       ASN1_TYPE oldenckdcreppart,
			       ASN1_TYPE * enckdcreppart);
extern int shishi_as_process (Shishi * handle,
			      ASN1_TYPE asreq,
			      ASN1_TYPE asrep,
			      char *string,
			      ASN1_TYPE * enckdcreppart);
extern int shishi_kdc_process (Shishi * handle,
			       ASN1_TYPE kdcreq,
			       ASN1_TYPE kdcrep,
			       Shishi_key *key,
			       int keyusage,
			       ASN1_TYPE * enckdcreppart);
extern
  int
shishi_kdcrep_get_ticket (Shishi * handle,
			  ASN1_TYPE kdcrep, ASN1_TYPE * ticket);
extern
  int
shishi_kdc_rep_extract_enc_part_etype (Shishi * handle,
				       ASN1_TYPE asrep, int *etype);
extern
  int
shishi_kdc_rep_extract_enc_part_key (Shishi * handle,
				     ASN1_TYPE asrep,
				     int *keytype,
				     unsigned char *keyvalue,
				     int *keyvalue_len);
extern
  int
shishi_kdcreq_add_padata_tgs (Shishi * handle,
			      ASN1_TYPE kdcreq, ASN1_TYPE apreq);
extern ASN1_TYPE shishi_tgs_req (Shishi * handle);
extern ASN1_TYPE shishi_as_req (Shishi * handle);
extern int
shishi_kdcreq (Shishi * handle, char *realm, char *service, ASN1_TYPE * req);

/* base64.c */
extern void shishi_to_base64 (unsigned char *out, const unsigned char *in,
			      int len, int olen);
extern int shishi_from_base64 (unsigned char *out, const unsigned char *in);

/* vasprintf.c */
extern int shishi_asprintf (char **result, const char *format, ...);

/* gztime.c */
extern char *shishi_generalize_time (Shishi * handle, time_t time);
extern time_t shishi_generalize_ctime (Shishi * handle, char *now);

/* crypto.c */
extern const char *shishi_cipher_name (int type);
extern int shishi_cipher_blocksize (int type);
extern int shishi_cipher_minpadsize (int type);
extern int shishi_cipher_confoundersize (int type);
extern size_t shishi_cipher_keylen (int type);
extern int shishi_cipher_parse (const char *cipher);
extern int shishi_string_to_key (Shishi * handle,
				 int keytype,
				 char *password,
				 int passwordlen,
				 char *salt,
				 int saltlen,
				 char *parameter,
				 Shishi_key *outkey);
extern int shishi_random_to_key (Shishi * handle,
				 int keytype,
				 char *random,
				 int randomlen,
				 Shishi_key *outkey);
extern int shishi_encrypt (Shishi * handle,
			   Shishi_key *key,
			   int keyusage,
			   char *in, int inlen,
			   char *out, int *outlen);
extern int shishi_decrypt (Shishi * handle,
			   Shishi_key *key,
			   int keyusage,
			   char *in, int inlen,
			   char *out, int *outlen);
extern int shishi_checksum (Shishi * handle,
			    Shishi_key *key,
			    int keyusage,
			    int cksumtype,
			    char *in, int inlen, char *out, int *outlen);
extern int shishi_randomize (Shishi * handle, char *data, int datalen);
extern int shishi_dk (Shishi * handle,
		      Shishi_key *key,
		      char *constant,
		      int constantlen,
		      Shishi_key *derivedkey);
extern int shishi_dr (Shishi * handle,
		      Shishi_key *key,
		      char *derivedkey,
		      int derivedkeylen,
		      char *constant,
		      int constantlen);
extern int shishi_n_fold (Shishi * handle, char *in, int m, char *out, int n);

/* version.c */
extern const char *shishi_check_version (const char *req_version);

/* password.c */
extern int shishi_read_password (FILE * fh, char *s, int size);
extern int
shishi_prompt_password_raw (FILE * in, char *s, int size,
			    FILE * out, char *format, ...);
extern int
shishi_prompt_password (Shishi *handle,
			FILE * in, char *s, int size,
			FILE * out, char *format, ...);

/* asn1.c */
extern ASN1_TYPE shishi_d2a_aprep (Shishi * handle, char *der, int derlen);
extern ASN1_TYPE
shishi_d2a_encapreppart (Shishi * handle, char *der, int der_len);

/* ap.c */
extern const char *shishi_ap_option2string (int option);
extern int shishi_ap_string2option (const char *str);

extern int shishi_ap (Shishi * handle, Shishi_ap ** ap);

extern Shishi_ticket *shishi_ap_ticket (Shishi_ap * ap);
extern void shishi_ap_ticket_set (Shishi_ap * ap, Shishi_ticket * ticket);

extern int shishi_ap_authenticator_cksumdata (Shishi_ap * ap,
					      char *out, int *len);
extern void
shishi_ap_authenticator_cksumdata_set (Shishi_ap * ap,
				       char *authenticatorcksumdata,
				       int authenticatorcksumdatalen);

extern ASN1_TYPE shishi_ap_authenticator (Shishi_ap * ap);
extern void shishi_ap_authenticator_set (Shishi_ap * ap,
					 ASN1_TYPE authenticator);

extern ASN1_TYPE shishi_ap_req (Shishi_ap * ap);
extern int shishi_ap_req_build (Shishi_ap * ap);
extern int shishi_ap_req_asn1 (Shishi_ap * ap, ASN1_TYPE * apreq);
extern int shishi_ap_req_der (Shishi_ap * ap, char *out, int *outlen);
extern void shishi_ap_req_set (Shishi_ap * ap, ASN1_TYPE apreq);

extern ASN1_TYPE shishi_ap_rep (Shishi_ap * ap);
extern int shishi_ap_rep_der_set (Shishi_ap * ap, char *der, int derlen);
extern int shishi_ap_rep_verify (Shishi_ap * ap);
extern int shishi_ap_rep_verify_der (Shishi_ap * ap, char *der, int derlen);
extern int shishi_ap_rep_verify_asn1 (Shishi_ap * ap, ASN1_TYPE aprep);
extern void shishi_ap_rep_set (Shishi_ap * ap, ASN1_TYPE aprep);

extern ASN1_TYPE shishi_ap_encapreppart (Shishi_ap * ap);
extern void shishi_ap_encapreppart_set (Shishi_ap * ap,
					ASN1_TYPE encapreppart);

/* key.c */
extern int shishi_key_type (Shishi_key * key);
extern void shishi_key_type_set (Shishi_key * key, int type);
extern char *shishi_key_value (Shishi_key * key);
extern void shishi_key_value_set (Shishi_key * key, char *value);
extern const char *shishi_key_name (Shishi_key * key);
extern size_t shishi_key_length (Shishi_key * key);
extern Shishi_key *shishi_key (int type, char *value);
extern void shishi_key_done (Shishi_key *key);
extern void shishi_key_copy (Shishi_key * dstkey, Shishi_key *srckey);
extern int shishi_key_from_random (Shishi *handle,
				   int type,
				   char *random,
				   int randomlen,
				   Shishi_key **outkey);
extern int shishi_key_from_string (Shishi *handle,
				   int type,
				   char *password,
				   int passwordlen,
				   char *salt,
				   int saltlen,
				   char *parameter,
				   Shishi_key **outkey);

/* encapreppart.c */
extern ASN1_TYPE shishi_encapreppart (Shishi * handle);

/* apreq.c */
extern ASN1_TYPE shishi_apreq (Shishi * handle);

/* kdcrep.c */
extern int shishi_kdcrep_decrypt (Shishi * handle,
				  ASN1_TYPE kdcrep,
				  Shishi_key *key,
				  int keyusage,
				  ASN1_TYPE * enckdcreppart);
/* enckdcreppart.c */
extern int shishi_enckdcreppart_get_key (Shishi * handle,
					 ASN1_TYPE enckdcreppart,
					 Shishi_key **key);

/* aprep.c */
extern ASN1_TYPE shishi_aprep (Shishi * handle);
extern int shishi_aprep_decrypt (Shishi * handle,
				 ASN1_TYPE aprep,
				 Shishi_key *key,
				 int keyusage,
				 ASN1_TYPE * encapreppart);

#endif
