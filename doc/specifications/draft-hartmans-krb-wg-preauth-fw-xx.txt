

Kerberos Working Group                                        S. Hartman
Internet-Draft                                                       MIT
Expires: April 25, 2004                                 October 26, 2003


         A Generalized Framework for Kerberos Preauthentication
                   draft-hartman-krb-wg-preauth-fw-xx

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that other
   groups may also distribute working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at http://
   www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on April 25, 2004.

Copyright Notice

   Copyright (C) The Internet Society (2003). All Rights Reserved.

Abstract

   Kerberos is a protocol for verifying the identity of principals
   (e.g., a workstation user or a network server) on an open network.
   The Kerberos protocol provides a mechanism called preauthentication
   for proving the identity  of a principal and for better protecting
   the long-term secret of the principal.

   This document describes a model for Kerberos preauthentication
   mechanisms.  The model describes what state in the Kerberos request a
   preauthentication mechanism is likely to change. It also describes
   how multiple preauthentication mechanisms used in the same request
   will interact.

   This document also provides common tools needed by multiple



Hartman                  Expires April 25, 2004                 [Page 1]

Internet-Draft        Kerberos Preauth Framework            October 2003


   preauthentication mechanisms.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [3].

Table of Contents

   1.    Introduction . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.    Model for Preauthentication  . . . . . . . . . . . . . . . .  4
   2.1   Information Managed by Model . . . . . . . . . . . . . . . .  4
   2.2   The Preauth_Required Error . . . . . . . . . . . . . . . . .  6
   2.3   Client to KDC  . . . . . . . . . . . . . . . . . . . . . . .  7
   2.4   KDC to Client  . . . . . . . . . . . . . . . . . . . . . . .  7
   3.    Preauthentication Facilities . . . . . . . . . . . . . . . .  8
   3.1   Client Authentication  . . . . . . . . . . . . . . . . . . .  9
   3.2   Strengthen Reply Key . . . . . . . . . . . . . . . . . . . .  9
   3.3   Replace Reply Key  . . . . . . . . . . . . . . . . . . . . .  9
   3.4   Verify Response  . . . . . . . . . . . . . . . . . . . . . .  9
   4.    Requirements for Preauthentication Mechanisms  . . . . . . . 10
   5.    Tools for Use in Preauthentication Mechanisms  . . . . . . . 11
   5.1   Combine Keys . . . . . . . . . . . . . . . . . . . . . . . . 11
   5.1.1 Signing Requests/Responses . . . . . . . . . . . . . . . . . 11
   6.    IANA Considerations  . . . . . . . . . . . . . . . . . . . . 12
   7.    Security Considerations  . . . . . . . . . . . . . . . . . . 13
   8.    Acknowledgements . . . . . . . . . . . . . . . . . . . . . . 14
         Author's Address . . . . . . . . . . . . . . . . . . . . . . 16
         Normative References . . . . . . . . . . . . . . . . . . . . 15
         Informative References . . . . . . . . . . . . . . . . . . . 16
   A.    Todo List  . . . . . . . . . . . . . . . . . . . . . . . . . 17
         Intellectual Property and Copyright Statements . . . . . . . 18




















Hartman                  Expires April 25, 2004                 [Page 2]

Internet-Draft        Kerberos Preauth Framework            October 2003


1. Introduction

   The core Kerberos specification treats preauthentication data as an
   opaque typed hole in the messages to the KDC that may influence the
   reply key used to encrypt the KDC response.  This generality has been
   useful: preauthentication data is used for a variety of extensions to
   the protocol, many outside the expectations of the initial designers.
   However, this generality makes designing the more common types of
   preauthentication mechanisms difficult. Each mechanism needs to
   specify how it interacts with other mechanisms.  Also, problems like
   combining a key with the long-term secret or proving the identity of
   the user are common to multiple mechanisms.  Where there are
   generally well-accepted solutions to these problems, it is desirable
   to standardize one of these solutions so mechanisms  can avoid
   duplication of work.  In other cases, a modular approach to these
   problems is appropriate.  The modular approach will allow new  and
   better solutions to common preauth problems to be used by existing
   mechanisms as they are developed.

   This document specifies a framework for Kerberos preauthentication
   mechanisms.  IT defines the common set of functions preauthentication
   mechanisms perform as well as how these functions affect the state of
   the request and response.  In addition several common tools needed by
   preauthentication mechanisms are provided.  Unlike [2], this
   framework is not complete--it does not describe all the inputs and
   outputs for the preauthentication mechanisms.  Mechanism designers
   should try to be consistent with this framework because doing so will
   make their mechanisms easier to implement.  Kerberos implementations
   are likely to have plugin architectures  for preauthentication; such
   architectures are likely to support mechanisms that follow this
   framework plus commonly used extensions.

   This document should be read only after reading the documents
   describing the Kerberos cryptography framework [2] and the core
   Kerberos protocol [1].  This document freely uses terminology and
   notation from these documents without reference or further
   explanation.














Hartman                  Expires April 25, 2004                 [Page 3]

Internet-Draft        Kerberos Preauth Framework            October 2003


2. Model for Preauthentication

   when a Kerberos client wishes to obtain a ticket using the
   authentication server, it sends an initial AS request.  If
   preauthentication is being used, then the KDC will respond with a
   KDC_ERR_PREAUTH_REQUIRED error.  Alternatively, if the client knows
   what preauthentication to use, it MAY optimize a round-trip and send
   an initial request with padata included.  If the client includes the
   wrong padata, the server MAY return KDC_ERR_PREAUTH_FAILED with no
   indication of what padata should have been included.  For
   interoperability reasons, clients that include optimistic preauth
   MUST retry with no padata and examine the KDC_ERR_PREAUTH_REQUIRED if
   they receive a KDC_ERR_PREAUTH_FAILED in response to their initial
   optimistic request.

   The KDC maintains no state between two requests; subsequent requests
   may even be processed by a different KDC. However, the client needs
   to maintain state between requests in order to select the
   preauthentication mechanisms to use.  The client also needs to
   maintain state between a response and the subsequent request.  For
   example, in challenge/response authentication [6], the initial
   KDC_ERR_PREAUTH_REQUIRED will contain a set of challenges.  The
   client must maintain sufficient state to respond to these challenges
   in the next request.

   This framework specifies the behavior of Kerberos preauthentication
   mechanisms used to identify users or to modify the reply key used to
   encrypt the KDC response.  The padata typed hole may be used to carry
   extensions to Kerberos that have nothing to do with proving the
   identity of the user or establishing a reply key.  These extensions
   are outside the scope of this framework.  However mechanisms that do
   accomplish these goals should follow this framework.

   This framework specifies the minimum state that a Kerberos
   implementation needs to maintain while handling a request in order to
   process preauthentication.  It also specifies how Kerberos
   implementations process the preauthentication data at each step of
   the AS request process.

2.1 Information Managed by Model

   The following is maintained by the client and KDC as each request is
   being processed:

   o  The reply key used to encrypt the KDC response

   o  How strongly the identity of the client has been authenticated




Hartman                  Expires April 25, 2004                 [Page 4]

Internet-Draft        Kerberos Preauth Framework            October 2003


   o  Whether the contents of the KDC response can be  verified by the
      client principal

   o  Whether the contents of the KDC response can be  verified by the
      client machine

   Conceptually, the reply key is initially the long-term key of the
   principal.  However, principals can have multiple long-term keys
   because of support for multiple encryption types, salts and
   string2key parameters.  As described in section 5.2.7.5 of the
   Kerberos protocol [1], the KDC sends PA-ETYPe-INFO2 to notify the
   client  what types of keys are available.  Thus in full generality,
   the reply key in the preauth model is actually a set of keys.  At the
   beginning of a request, it is initialized to the set of long-term
   keys advertised in the PA-ETYPE-INFO2 element on the KDC.  If
   multiple reply keys are available, the client chooses which one to
   use.  Thus the client does not need to treat the reply key as a set.
   At the beginning of a handling a request, the client picks a reply
   key to use.

   KDC implementations MAY choose to offer only one key in the
   PA-ETYPE-INFO2 element.  Since the KDC already knows the client's
   list of supported enctypes from the  request, no interoperability
   problems are created by choosing a single possible reply key.  This
   way, the KDC implementation avoids the complexity of treating the
   reply key as a set.

   At the beginning of handling a message on both the client and KDC,
   the client's identity is not authenticated.  A mechanism may indicate
   that it has successfully authenticated the client's identity.  This
   information is useful to keep track of on the client  in order to
   know what preauthentication mechanisms should be used.  The KDC needs
   to keep track of whether the client is authenticated because the
   primary purpose of preauthentication is to authenticate the client
   identity before issuing a ticket.  Implementations that have
   preauthentication mechanisms offering significantly different
   strengths of client authentication MAY choose to keep track of the
   strength of the authentication used as an input into policy
   decisions.  For example, some principals might require strong
   preauthentication, while less sensitive principals can use relatively
   weak forms of preauthentication like encrypted timestamp.

   Without preauthentication, the client knows that the KDC request is
   authentic and has not been modified because it is encrypted in the
   long-term key of the client.  Only the KDC and client know that key.
   So at the start of handling any message the KDC request is presumed
   to be verified to the client principal.  Any preauthentication
   mechanism that sets a new reply key not based on the principal's



Hartman                  Expires April 25, 2004                 [Page 5]

Internet-Draft        Kerberos Preauth Framework            October 2003


   long-term secret MUST either verify the KDC response some other way
   or indicate that the response is not verified.  If a mechanism
   indicates that the response is not verified then the client
   implementation MUST return an error unless a subsequent mechanism
   verifies the response.  The KDC needs to track this state so it can
   avoid generating a response that is not verified.

   The typical Kerberos request does not provide a way for the client
   machine to know that it is talking to the correct KDC. Someone who
   can inject packets into the network between the client machine and
   the KDC and who knows the password that the user will give to the
   client machine can generate a KDC response that will decrypt
   properly.  So, if the client machine needs to authenticate that the
   user is in fact the named principal, then the client machine needs to
   do a TGS request for itself as a service.  Some preauthentication
   mechanisms may provide  a way for the client to authenticate the KDC.
   Examples of this include signing the response with a well-known
   public key or providing a ticket for the client machine as a service
   in addition to the requested ticket.

2.2 The Preauth_Required Error

   Typically a client sends an initial request with no
   preauthentication.  If the KDC requires preauthentication, then it
   returns a KDC_ERR_PREAUTH_REQUIRED message.  This message MAY also be
   returned for preauthentication configurations that use
   multi-round-trip mechanisms.  This error contains a sequence of
   padata.  Typically the padata contains the preauth type IDs of all
   the available preauthentication mechanisms.  IN the initial error
   response, most mechanisms do not contain data.  If a mechanism
   requires multiple round trips or starts with a challenge from the KDC
   to the client, then it will likely contain data in the initial error
   response.

   The KDC SHOULD NOT send data that is encrypted in the long-term
   password-based key of the principal.  Doing so has the same security
   exposures as the Kerberos protocol without preauthentication.  There
   are few situations where preauthentication is desirable and where the
   KDC needs to expose ciphertext encrypted in a weak key before the
   client has proven knowledge of that key.

   In order to generate the error response, the KDC first starts by
   initializing the preauthentication state.  Then it processes any
   padata in the client's request in the order provided by the client.
   Mechanisms that are not understood by the KDC are ignored.
   Mechanisms that are inappropriate for the client principal or request
   SHOULD also be ignored.  Next, it generates padata for the error
   response, modifying the preauthentication state appropriately as each



Hartman                  Expires April 25, 2004                 [Page 6]

Internet-Draft        Kerberos Preauth Framework            October 2003


   mechanism is processed.  The KDC chooses the order in which it will
   generated padata (and thus the order of padata in the response), but
   it needs to modify the preauthentication state consistently with the
   choice of order.  For example, if some mechanism establishes an
   authenticated client identity, then the mechanisms subsequent in the
   generated response receive this state as input.  After the padata is
   generated, the error response is sent.

2.3 Client to KDC

   This description assumes a client has already received a
   KDC_ERR_PREAUTH_REQUIRED from the KDC.  If the client performs
   optimistic preauthentication then the client needs to optimisticly
   choose the information it would normally receive from this error
   response.

   The client starts by initializing the preauthentication state as
   specified.  It then processes the pdata in the
   KDC_ERR_PREAUTH_REQUIRED.

   After processing the pdata in the KDC error, the client generates a
   new request.  It processes the preauthentication mechanisms in the
   order in which they will appear in the next request, updating the
   state as appropriate. When the request is complete it is sent.

2.4 KDC to Client

   When a KDC receives an AS request from a client, it needs to
   determine whether it will respond with an error or  a AS reply.
   There are many causes for an error to be generated that have nothing
   to do with preauthentication; they are discussed in the Kerberos
   specification.

   From the standpoint of evaluating the preauthentication, the KDC
   first starts by initializing the preauthentication state.  IT then
   processes the padata in the request.  AS mentioned in Section 2.2,
   the KDC MAY ignore padata that is inappropriate for the configuration
   and MUST ignore padata of an unknown type.

   At this point the KDC decides whether it will issue a
   preauthentication required error or a reply.  Typically a KDC will
   issue a reply if the client's identity has been authenticated to a
   sufficient degree.  The processing of the preauthentication required
   error is described in Section 2.2.

   The KDC generates the pdata modifying the preauthentication state as
   necessary.  Then it generates the final response, encrypting it in
   the current preauthentication reply key.



Hartman                  Expires April 25, 2004                 [Page 7]

Internet-Draft        Kerberos Preauth Framework            October 2003


3. Preauthentication Facilities

   Preauthentication mechanisms can be thought of as conceptually
   providing various facilities.  This serves two useful purposes.
   First, mechanism authors can choose only to solve one specific small
   problem.  It is often useful for a mechanism designed to offer key
   management not to directly provide client authentication, but instead
   to allow one or more other mechanisms to handle this need.  Secondly,
   thinking about the  abstract services that a mechanism provides
   yields a minimum set of security requirements that all mechanisms
   providing that facility must meet. These security requirements are
   not complete; mechanisms will have additional security requirements
   based on the specific protocol they employ.

   A mechanism is not constrained to only offering one of these
   facilities.  While such mechanism can be designed and are sometimes
   useful, many preauthentication mechanisms implement several
   facilities.  By combining multiple facilities in a single mechanism,
   it is often easier to construct a secure, simple solution than  by
   solving the problem in full generality.  Even when mechanisms provide
   multiple facilities, they need to meet the security requirements for
   all the facilities they provide.

   According to Kerberos extensibility rules (section 1.4.2 of the
   Kerberos specification [1]), an extension MUST NOT change the
   semantics of a message unless a recipient is known to understand that
   extension.  Because a client does not know that the KDC supports a
   particular preauth mechanism when it sends an initial request, a
   preauth mechanism MUST NOT change the semantics of the request in a
   way that will break a KDC that does not understand that mechanism.
   Similarly, KDCs MUST not send messages to clients that affect the
   core semantics unless the clients have indicated support for the
   message.

   The only state in this model that would break the interpretation of a
   message is changing the expected reply key.  If the one mechanism
   changed the reply key and a later mechanism used that reply key, then
   a KDC that interpreted the second mechanism but not the first would
   fail to interpret the request correctly.  In order to avoid this
   problem, the reply key is reset between handling each padata. Section
   3.2 discusses how to design mechanisms that modify the reply key to
   work within this constraint.  Other changes in the state described in
   Section 2.1 can safely be ignored by a KDC that does not understand a
   mechanism.  Mechanisms that modify the behavior of the request
   outside the scope of this framework need to carefully consider the
   Kerberos extensibility rules to avoid similar problems.





Hartman                  Expires April 25, 2004                 [Page 8]

Internet-Draft        Kerberos Preauth Framework            October 2003


3.1 Client Authentication

      Binding to reply key

      Consider Secure ID case where you don't have anything to bind to


3.2 Strengthen Reply Key

      Containers to handle reply key when not sure whether other side
      supports mech

      Make sure reply key is not used previously


3.3 Replace Reply Key

      Interactions with client authentication

      Reference to container argument


3.4 Verify Response




























Hartman                  Expires April 25, 2004                 [Page 9]

Internet-Draft        Kerberos Preauth Framework            October 2003


4. Requirements for Preauthentication Mechanisms

      State management for multi-round-trip mechs

      Security interactions with other mechs














































Hartman                  Expires April 25, 2004                [Page 10]

Internet-Draft        Kerberos Preauth Framework            October 2003


5. Tools for Use in Preauthentication Mechanisms

5.1 Combine Keys

5.1.1 Signing Requests/Responses














































Hartman                  Expires April 25, 2004                [Page 11]

Internet-Draft        Kerberos Preauth Framework            October 2003


6. IANA Considerations


















































Hartman                  Expires April 25, 2004                [Page 12]

Internet-Draft        Kerberos Preauth Framework            October 2003


7. Security Considerations


















































Hartman                  Expires April 25, 2004                [Page 13]

Internet-Draft        Kerberos Preauth Framework            October 2003


8. Acknowledgements


















































Hartman                  Expires April 25, 2004                [Page 14]

Internet-Draft        Kerberos Preauth Framework            October 2003


Normative References

   [1]  "Kerberos Clarifications", 2003.

   [2]  "kcrypto", 2003.

   [3]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", RFC 2119, BCP 14, March 1997.

   [4]  Yergeau, F., "UTF-8, a transformation format of ISO 10646", RFC
        2279, January 1998.

   [5]  Alvestrand, H., "Tags for the Identification of Languages", RFC
        1766, March 1995.





































Hartman                  Expires April 25, 2004                [Page 15]

Internet-Draft        Kerberos Preauth Framework            October 2003


Informative References

   [6]  "Ken's SAM draft", 2003.


Author's Address

   Sam hartman
   MIT

   EMail: hartmans@mit.edu








































Hartman                  Expires April 25, 2004                [Page 16]

Internet-Draft        Kerberos Preauth Framework            October 2003


Appendix A. Todo List

      Flesh out sections that are still outlines

      Discuss cookies and multiple-round-trip mechanisms.














































Hartman                  Expires April 25, 2004                [Page 17]

Internet-Draft        Kerberos Preauth Framework            October 2003


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights. Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11. Copies of
   claims of rights made available for publication and any assurances of
   licenses to be made available, or the result of an attempt made to
   obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification can
   be obtained from the IETF Secretariat.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard. Please address the information to the IETF Executive
   Director.


Full Copyright Statement

   Copyright (C) The Internet Society (2003). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION



Hartman                  Expires April 25, 2004                [Page 18]

Internet-Draft        Kerberos Preauth Framework            October 2003


   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.











































Hartman                  Expires April 25, 2004                [Page 19]

